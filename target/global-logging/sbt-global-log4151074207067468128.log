[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\13148\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\13148\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.1 (Oracle Corporation Java 1.8.0_221)
[debug]       Load.loadUnit: plugins took 127.6257ms
[debug]       Load.loadUnit: defsScala took 0.3832ms
[debug] [Loading] Scanning directory C:\Users\13148\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\13148\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.3734 ms
[debug]           Load.resolveProject(global-plugins) took 168.0747ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\13148\.sbt\1.0\plugins, plugins: List(<none>))) took 214.7553ms
[debug] [Loading] Done in C:\Users\13148\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 242.2063ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3445ms
[debug]     Load.loadUnit(file:/C:/Users/13148/.sbt/1.0/plugins/, ...) took 380.7765ms
[debug]   Load.apply: load took 649.9562ms
[debug]   Load.apply: resolveProjects took 10.164ms
[debug]   Load.apply: finalTransforms took 74.8921ms
[debug]   Load.apply: config.delegates took 11.8284ms
[debug]   Load.apply: Def.make(settings)... took 471.6413ms
[debug]   Load.apply: structureIndex took 115.0005ms
[debug]   Load.apply: mkStreams took 1.8057ms
[info] loading global plugins from C:\Users\13148\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5933.9147ms
[debug]           Load.loadUnit: plugins took 25.5549ms
[debug]           Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\MLOpsFromScratch\project
[debug]             Load.loadUnit: mkEval took 11.5519ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\MLOpsFromScratch\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.3178 ms
[info] loading settings for project mlopsfromscratch-build from idea.sbt ...
[debug]               Load.resolveProject(mlopsfromscratch-build) took 4.443ms
[debug]             Load.loadTransitive: finalizeProject(Project(id mlopsfromscratch-build, base: C:\MLOpsFromScratch\project, plugins: List(<none>))) took 7.4588ms
[debug] [Loading] Done in C:\MLOpsFromScratch\project, returning: (mlopsfromscratch-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3211.5634ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.8503ms
[debug]         Load.loadUnit(file:/C:/MLOpsFromScratch/project/, ...) took 3243.9491ms
[debug]       Load.apply: load took 3245.3951ms
[debug]       Load.apply: resolveProjects took 0.1368ms
[debug]       Load.apply: finalTransforms took 10.5925ms
[debug]       Load.apply: config.delegates took 0.5951ms
[debug]       Load.apply: Def.make(settings)... took 108.9874ms
[debug]       Load.apply: structureIndex took 50.4207ms
[debug]       Load.apply: mkStreams took 0.0043ms
[info] loading project definition from C:\MLOpsFromScratch\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6344.5934ms
[debug]     Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\MLOpsFromScratch
[debug]       Load.loadUnit: mkEval took 0.2552ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.3814 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 43.7519ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\MLOpsFromScratch, plugins: List(<none>))) took 48.9189ms
[debug] [Loading] Done in C:\MLOpsFromScratch, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2563.0296ms
[debug]     Load.loadUnit: cleanEvalClasses took 24.4947ms
[debug]   Load.loadUnit(file:/C:/MLOpsFromScratch/, ...) took 8932.9924ms
[debug] Load.apply: load took 8934.7082ms
[debug] Load.apply: resolveProjects took 0.1277ms
[debug] Load.apply: finalTransforms took 66.1362ms
[debug] Load.apply: config.delegates took 1.0564ms
[debug] Load.apply: Def.make(settings)... took 171.1775ms
[debug] Load.apply: structureIndex took 45.3425ms
[debug] Load.apply: mkStreams took 0.0035ms
[info] set current project to MLOpsFromScratch (in build file:/C:/MLOpsFromScratch/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57760 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57760, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to MLOpsFromScratch (in build file:/C:/MLOpsFromScratch/)
[debug] > Exec(idea-shell, None, None)
